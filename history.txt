Prehistory of HIDE
by AS3Boyan

Who I am?
I am active Haxe developer. Also I'm a co-founder of HIDE.

Intro
I actively used FlashDevelop for Haxe projects. It is pretty good, the best one, but sadly it's available only for Windows. One does not simply to port it to Mac and Linux and maintain.

I was using very low end PC at that time, and I realized that I could create even more lightweight IDE, which will run cross platform and have features that I wanted to see.
I wanted to have that freedom to be able to use Linux, since it's fast and doesn't require modern hardware.
And most important - which can provide smooth work flow.
So I got my own vision of IDE for Haxe and I decided to prove myself that it is possible to make minimalistic IDE, which can provide smart code completion.

*(I posted some bug reports and feature requests on FD forum: http://www.flashdevelop.org/community/viewtopic.php?f=6&t=10934.)
*(Nowadays, many bugs in FD were fixed since that time and right now FD has much better Haxe support.)

Cactus IDE
It is an effort to make cross platform IDE for Haxe using Java.
Java was chosen as it is cross platform, well tested(Swing one) and very fast.
It was started as experiment in Java by me, and I tried implementing 

I used Java Swing for UI and RSyntaxTextArea component(by Robert Futrell).

I started IndieGoGo campaign for this project.
http://www.indiegogo.com/projects/cactus-ide

Cactus IDE(Swing)
+ you can find a lot of code samples for implementing almost anything using Swing.
- need to use lots of dirty hacks(You can find workarounds for most of them on the Internet)
- apps which use it has a look like an app from Windows 98(themes can be applied, but it's still not that much better)
+ a lot of text editing components was already written for it(RSyntaxTextArea and similar) by some open source developers

Cactus IDE(JavaFX + WebView + CodeMirror)
+ JavaFX themes look really good and modern(animated)
- JavaFX doesn't have decent rich text editing component(So I had to use WebView to embed CodeMirror into IDE, which is not very good thing)
+ no need for dirty hacks, since JavaFX is trying to provide much better work flow than Swing did
- WebView JS engine is slow(comparing to node-webkit's JS engine) and has some visual glitches

JS vs world
+ many people are really obsessed with it and you can see a lot of open source projects written in JS(JS takes first place on Github by a number of created repositories in 2013
http://adambard.com/blog/top-github-languages-for-2013-so-far/)
+ now it's very cool and trendy to write in JS nowadays, and big corporations even made JS preprocessors/translators like Dart by Google or TypeScript by Microsoft.
+ Haxe has great support for JS target (Generated JS code looks are easy to read and should run fast)
+ big money invested in HTML5 and there are tremendous work on JS engines to make them as fast and stable as possible. (Remember how Google Chrome took leading positions in browsers world?)
He even almost kicked IE off stage and Opera is not a popular browser any more. Even regular users, migrated to Chrome.
- JS still many times slower than statically typed languages
- one does not simply to write JS without any JS translator
- it's much harder to write interactive applications in JS than using Flash(even with use such frameworks like CreateJS)
+ Haxe solves many JS problems, so we don't need to bother with it.

HIDE (node-webkit + CodeMirror)
+ customizable, plugin-based from start
+ it uses very fast and lightweight JS engine
+ should be usable on low end PCs(like P4)
+ node-webkit provides Chrome Dev Tools which is really powerful debugger for HTML5 target

FlashDevelop
+ good completion and code generation
- currently one does not simply to write plugins in Haxe(using C# target)
- Windows only

NetBeans
+ error stripe
+ pretty good completion and code generation
+ shows starting lines of loops and conditionals when it is outside code editor
- heavyweight IDE

Writing a plugin for IDE
- such IDEs have maybe millions lines of code, that I don't need for Haxe projects(imagine 90% of code, really not needed for Haxe)
- often plugins functionality in IDEs is too dependant on core features and can't modify core part of IDE, so they can provide only very limited functionality
- it's hard to contribute and fix bugs in IDE when it is written not in Haxe(for Haxe community)
- it requires knowledge of inner structure of IDE
- being dependant on some IDE is a risky, project owners can just freeze project or change their policy any time.

Brackets
+ project supports extensions
- they are trying to improve HTML and JS work flows, Haxe doesn't have JS flaws and doesn't need this kind of functionality(it can be used only for HTML code)
(Brackets and now it's pretty not bad for HTML)
(actually Chrome Dev Tools already does something similar to what Brackets trying to achieve)

Haxe IDE written in Haxe

"You can't write IDE on alone", "one person can't make IDE, only big companies can do that" some people sad about making IDE.
